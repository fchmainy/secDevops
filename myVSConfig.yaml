---
- name: Get an IP Address and reserve it on the IPAM
  hosts: ipam
  connection: local

  tasks:
      - name: include Variables
        include_vars: 'myVariables.yaml'
      - name: Get a New Token
        phpipam_getToken:
           ipam: "{{ inventory_hostname }}"
           user: "{{ user }}"
           password: "{{ password }}"
        register: myToken

      - name: get Next Available IP Address
        phpipam_getNextIP:
           ipam: "{{ inventory_hostname }}"
           user: "{{ user }}"
           password: "{{ password }}"
           tenant: "{{ tenant }}"
           token: "{{ myToken.tokenId }}"
        register: myIP

      - name: reserve the Next Available IP Address
        phpipam_reserveNextIP:
           ipam: "{{ inventory_hostname }}"
           user: "{{ user }}"
           password: "{{ password }}"
           tenant: "{{ tenant }}"
           token: "{{ myToken.tokenId }}"
           fqdn: "{{ fqdn }}"
           ipAddress: "{{ myIP.ipAddress }}"

      - set_fact:
           dynamicIPAddress: "{{ myIP.ipAddress }}"


- name: Deploy a new Service
  hosts: all
  connection: local

  tasks:
      - name: include Variables
        include_vars: 'myVariables.yaml'

      - name: create a new Transaction
        f5_startTransaction:
            server: "{{ inventory_hostname }}"
            user: "{{ bigip_username }}"
            password: "{{ bigip_password }}"
            validate_certs: "{{ validate_certs }}"
        register: transId

      - name: Add a Pool
        f5_pool:
            connection: "rest"
            server: "{{ inventory_hostname }}"
            transactionId: "{{transId.transId}}"
            user: "{{ bigip_username }}"
            password: "{{ bigip_password }}"
            validate_certs: "{{ validate_certs }}"
            name: "{{fqdn}}_pool"
            monitor: "http"
        delegate_to: localhost
        register: result

      - name: Add a Member
        f5_member:
            connection: "rest"
            server: "{{ inventory_hostname }}"
            transactionId: "{{transId.transId}}"
            user: "{{ bigip_username }}"
            password: "{{ bigip_password }}"
            validate_certs: "{{ validate_certs }}"
            partition: "{{partition}}"
            pool: "{{appName}}_pool"
            name: "{{appName}}_member"
            address: "{{ member }}"
            port: "80"
        delegate_to: localhost
        register: result

      - name: Create a Virtual
        f5_virtual:
            connection: "rest"
            server: "{{ inventory_hostname }}"
            transactionId: "{{transId.transId}}"
            user: "{{ bigip_username }}"
            password: "{{ bigip_password }}"
            name: "{{appName}}_vs"
            description: "Ansible: {{ fqdn }}"
            destination: "{{ hostvars['10.128.1.154']['dynamicIPAddress'] }}"
            port: "443"
            ipProtocol: "tcp"
            mask: "255.255.255.255"
            source: "0.0.0.0/0"
            snat: "automap"
            snatpool: ""
            pool: "{{appName}}_pool"

      - name: Attach a Client SSL Profile with wildcard certificate
        f5_attach_vs_profile:
            connection: "rest"
            server: "{{ inventory_hostname }}"
            transactionId: "{{transId.transId}}"
            user: "{{ bigip_username }}"
            password: "{{ bigip_password }}"
            virtual: "{{appName}}_vs"
            name: "clientssl"
            context: "clientside"

      - name: Attach an HTTP Profile to Virtual
        f5_attach_vs_profile:
            connection: "rest"
            server: "{{ inventory_hostname }}"
            transactionId: "{{transId.transId}}"
            user: "{{ bigip_username }}"
            password: "{{ bigip_password }}"
            virtual: "{{appName}}_vs"
            name: "http_w_xff"
            context: "all"

      - name: commit Transaction
        f5_commit:
            server: "{{ inventory_hostname }}"
            user: "{{ bigip_username }}"
            password: "{{ bigip_password }}"
            transactionId: "{{ transId.transId }}"

      - copy:
            content: "{{ hostvars['10.128.1.154']['dynamicIPAddress'] }}"
            dest: "./{{appName}}.ip"
